{"meta":{"title":"Kai Zhang","subtitle":"Healthcare Knowledge","description":"For the knowledge blogs","author":"Kai Zhang","url":"http://rainygoblin.github.io"},"pages":[],"posts":[{"title":"Hello Jhipster","slug":"2017/1/Hello-Jhipster","date":"2017-01-13T09:51:31.000Z","updated":"2017-03-09T02:57:18.912Z","comments":true,"path":"2017/01/13/2017/1/Hello-Jhipster/","link":"","permalink":"http://rainygoblin.github.io/2017/01/13/2017/1/Hello-Jhipster/","excerpt":"","text":"mvn spring-boot:run A hackable text editorAtom is a text editor that’s modern, approachable, yet hackable to the core—a tool you can customize to do anything but also use productively without ever touching a config file. Atom For Markdown使用Atom预览markdown 1、打开任意.md文件(markdown源文件)菜单栏File-&gt;Open file…(ctrl+o)打开文件； 2、windows下使用快捷键 ctrl + shift + p，打开命令输入框；Mac下使用 Command + Shift + P, 3、输入 markdown preview toggle(可以偷懒只输入mdpt，支持模糊匹配)也可以通过菜单栏Packages-&gt;Markdown Preview-&gt;Toggle Treview; 按enter键即可看到预览，左边编辑，右边实时预览:也可以直接使用快捷键不过由于快捷键冲突问题可能没效果，当你熟悉Atom之后你也可以定制属于直接的一套快捷键；","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"http://rainygoblin.github.io/tags/Java/"},{"name":"Jhipster","slug":"Jhipster","permalink":"http://rainygoblin.github.io/tags/Jhipster/"}]},{"title":"Hello Atom","slug":"2017/1/Hello-Maven","date":"2017-01-12T18:51:31.000Z","updated":"2017-03-09T02:57:18.912Z","comments":true,"path":"2017/01/12/2017/1/Hello-Maven/","link":"","permalink":"http://rainygoblin.github.io/2017/01/12/2017/1/Hello-Maven/","excerpt":"","text":"A hackable text editorAtom is a text editor that’s modern, approachable, yet hackable to the core—a tool you can customize to do anything but also use productively without ever touching a config file. Atom For Markdown使用Atom预览markdown 1、打开任意.md文件(markdown源文件)菜单栏File-&gt;Open file…(ctrl+o)打开文件； 2、windows下使用快捷键 ctrl + shift + p，打开命令输入框；Mac下使用 Command + Shift + P, 3、输入 markdown preview toggle(可以偷懒只输入mdpt，支持模糊匹配)也可以通过菜单栏Packages-&gt;Markdown Preview-&gt;Toggle Treview; 按enter键即可看到预览，左边编辑，右边实时预览:也可以直接使用快捷键不过由于快捷键冲突问题可能没效果，当你熟悉Atom之后你也可以定制属于直接的一套快捷键；","categories":[],"tags":[{"name":"Atom","slug":"Atom","permalink":"http://rainygoblin.github.io/tags/Atom/"},{"name":"Markdown","slug":"Markdown","permalink":"http://rainygoblin.github.io/tags/Markdown/"}]},{"title":"Hello Promise Observable","slug":"2016/12/Hello-Promise-Observable","date":"2016-12-30T22:42:40.000Z","updated":"2017-03-09T02:57:18.912Z","comments":true,"path":"2016/12/30/2016/12/Hello-Promise-Observable/","link":"","permalink":"http://rainygoblin.github.io/2016/12/30/2016/12/Hello-Promise-Observable/","excerpt":"","text":"Promise VS Observable A Promise handles a single event when an async operation completes or fails. Observable An Observable is like a Stream (in many languages) and allows to pass zero or more events where the callback is called for each event. Often Observable is preferred over Promise because it provides the features of Promise and more. With Observable it doesn’t matter if you want to handle 0, 1, or multiple events. You can utilize the same API in each case. Observable also has the advantage over Promise to be cancelable. If the result of an HTTP request to a server or some other expensive async operation isn’t needed anymore, the Subscription of an Observable allows to cancel the subscription, while a Promise will eventually call the success or failed callback even when you don’t need the notification or the result it provides anymore. Observable provides operators like map, forEach, reduce, … similar to an array There are also powerful operators like retry(), or replay(), … that are often quite handy.","categories":[],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"http://rainygoblin.github.io/tags/Javascript/"},{"name":"Promiss","slug":"Promiss","permalink":"http://rainygoblin.github.io/tags/Promiss/"},{"name":"Observable","slug":"Observable","permalink":"http://rainygoblin.github.io/tags/Observable/"}]},{"title":"Hello Canvas","slug":"2016/12/Hello-Canvas","date":"2016-12-28T14:42:40.000Z","updated":"2017-03-09T02:57:18.912Z","comments":true,"path":"2016/12/28/2016/12/Hello-Canvas/","link":"","permalink":"http://rainygoblin.github.io/2016/12/28/2016/12/Hello-Canvas/","excerpt":"","text":"Pixel manipulation with canvas","categories":[],"tags":[{"name":"Html 5","slug":"Html-5","permalink":"http://rainygoblin.github.io/tags/Html-5/"},{"name":"Canvas","slug":"Canvas","permalink":"http://rainygoblin.github.io/tags/Canvas/"}]},{"title":"Hello Hammerjs","slug":"2016/12/Hello-Hammerjs","date":"2016-12-27T22:46:19.000Z","updated":"2017-03-09T02:57:18.912Z","comments":true,"path":"2016/12/27/2016/12/Hello-Hammerjs/","link":"","permalink":"http://rainygoblin.github.io/2016/12/27/2016/12/Hello-Hammerjs/","excerpt":"","text":"Refer Hammer.js 123456789101112131415161718// get a reference to an elementvar stage = document.getElementById('stage');// create a manager for that elementvar mc = new Hammer.Manager(stage);// create a recognizervar Rotate = new Hammer.Rotate();// add the recognizermc.add(Rotate);// subscribe to eventsmc.on('rotate', function(e) &#123; // do something cool var rotation = Math.round(e.rotation); stage.style.transform = 'rotate('+rotation+'deg)';&#125;); An advanced demo is available here: http://codepen.io/runspired/full/ZQBGWd/ TypeScript @types/hammerjs Installation1npm install --save @types/hammerjs","categories":[],"tags":[{"name":"Hammerjs","slug":"Hammerjs","permalink":"http://rainygoblin.github.io/tags/Hammerjs/"},{"name":"TypeScript","slug":"TypeScript","permalink":"http://rainygoblin.github.io/tags/TypeScript/"}]},{"title":"changing locking screen orientation in ionic application","slug":"2016/12/changing-locking-screen-orientation-in-ionic-application","date":"2016-12-26T12:39:16.000Z","updated":"2017-03-09T02:57:18.912Z","comments":true,"path":"2016/12/26/2016/12/changing-locking-screen-orientation-in-ionic-application/","link":"","permalink":"http://rainygoblin.github.io/2016/12/26/2016/12/changing-locking-screen-orientation-in-ionic-application/","excerpt":"","text":"Changing &amp; Locking Screen Orientation In Ionic Application PREPARATION Before we can start make sure you have everything configured correctly. You will need to have these: Android Environment (or iOS if your working on a MacOS)nodeJSIonicCordovaIn case you don’t have a properly configured development environment take a look at this article: Ionic Framework | Installation Guide. UPDATE IONIC &amp; CORDOVA Don’t forget to update Ionic and Cordova, older versions may not work with this tutorial: 1npm update -g cordova ionic CREATE A NEW PROJECT ionic start IonicOrientationDemo blankcd IonicOrientationDemo Warning: Since a few of my readers never worked with Ionic CLI. From this point and further, every time I tell you to execute something, do that inside a project folder. At this point, we need to upgrade IonicOrientationDemo project with an appropriate platform. Because I’m using Windows we’re going to create an Android application: 1ionic platform add android if you’re a MacOS user, create an iOS application like this:1ionic platform add ios INSTALL SCREEN ORIENTATION PLUGIN Next, we need to import and install screen orientation plugin into a newly created project: 1cordova plugin add net.yoik.cordova.plugins.screenorientation GITHUB DEVELOPMENT At this point, you should have everything set up and ready, we can begin. Go to IonicOrientationDemo project directory and open main index.html file, add a controller to ion-content directive, like this: 1234567 Ionic Blank Starter Initialize this controller in app.js file: 123app.controller(‘MainCtrl’, function($scope) { }); Now add these two buttons: 12 Change To Landspace Mode Change To Portrait Mode And for a final touch, we’re going to change page orientation depending on a selected button: 12345678910111213app.controller(‘MainCtrl’, function($scope) { document.addEventListener(“deviceready”, onDeviceReady, false); function onDeviceReady() { $scope.changeOriantationLandspace = function() { screen.lockOrientation(‘landscape’); } $scope.changeOriantationPortrait = function() { screen.lockOrientation(&apos;portrait&apos;); } } }); This much code should be enough for a skeleton application, just a bare minimum. In the next chapter, I will show you how this application looks. Our final application should look like this: HTML Application main page (index.html). 123456789101112131415161718192021222324252627282930&lt;!DOCTYPE html&gt; Change To Landspace Mode Change To Portrait Mode JAVASCRIPT Application JavaScript file (app.js). 123456789101112131415161718192021222324252627282930313233// Ionic Starter App // angular.module is a global place for creating, registering and retrieving Angular modules// ‘starter’ is the name of this angular module example (also set in a attribute in index.html)// the 2nd parameter is an array of ‘requires’var app = angular.module(‘starter’, [‘ionic’]) .run(function($ionicPlatform) { $ionicPlatform.ready(function() { // Hide the accessory bar by default (remove this to show the accessory bar above the keyboard // for form inputs) if(window.cordova &amp;&amp; window.cordova.plugins.Keyboard) { cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true); } if(window.StatusBar) { StatusBar.styleDefault(); } });}); app.controller(‘MainCtrl’, function($scope) { document.addEventListener(“deviceready”, onDeviceReady, false); function onDeviceReady() { $scope.changeOriantationLandspace = function() { screen.lockOrientation(‘landscape’); } $scope.changeOriantationPortrait = function() { screen.lockOrientation(&apos;portrait&apos;); } } }); A warning, if you want to change a first page orientation (during the initial initialization), make sure to have a splash screen. Cordova device ready event may or may not trigger before Ionic application is active, so there’s a good chance application will start in portrait mode then visibly switch to landscape mode. DEPLOYMENT Next step, we need to build our application: 1ionic build android Be careful here, this step may break if you’re behind a firewall. The first execution will take a long time, so be patient. When this step ends, look at the output log, last two lines should look something like this: 12Built the following apk(s): D:\\Development\\IonicProject\\platforms\\android\\build\\outputs\\apk\\android-debug.apk We’ll use the last line location to deploy our application. Make sure your smartphone is prepared to accept an incoming application. In case of Android platform, you must enable Developer Options and USB debugging. Do this: 1adb install -r platforms\\android\\build\\outputs\\apk\\android-debug.apk","categories":[],"tags":[{"name":"Ionic 2","slug":"Ionic-2","permalink":"http://rainygoblin.github.io/tags/Ionic-2/"},{"name":"orientation","slug":"orientation","permalink":"http://rainygoblin.github.io/tags/orientation/"}]},{"title":"Ionic 2 Background Mode","slug":"2016/12/Ionic 2 Background Mode","date":"2016-12-25T23:09:16.000Z","updated":"2017-03-09T02:57:18.912Z","comments":true,"path":"2016/12/25/2016/12/Ionic 2 Background Mode/","link":"","permalink":"http://rainygoblin.github.io/2016/12/25/2016/12/Ionic 2 Background Mode/","excerpt":"","text":"How to make a background process when app is not running I am writing a sunrise and sunset app. The app is to fire audio alerts when the sun rises and sets. I got the whole thing sorted out under Android thanks to the following 2 plugins: 12de.appplant.cordova.plugin.background-modecordova-plugin-autostart","categories":[],"tags":[{"name":"Ionic 2","slug":"Ionic-2","permalink":"http://rainygoblin.github.io/tags/Ionic-2/"},{"name":"Background Mode","slug":"Background-Mode","permalink":"http://rainygoblin.github.io/tags/Background-Mode/"}]},{"title":"jQuery document ready vs self calling anonymous function","slug":"2016/12/jquery-document-ready-vs-self-calling-anonymous-function","date":"2016-12-25T14:39:16.000Z","updated":"2017-03-09T02:57:18.912Z","comments":true,"path":"2016/12/25/2016/12/jquery-document-ready-vs-self-calling-anonymous-function/","link":"","permalink":"http://rainygoblin.github.io/2016/12/25/2016/12/jquery-document-ready-vs-self-calling-anonymous-function/","excerpt":"","text":"jQuery document ready vs self calling anonymous function $(document).ready(function(){ … }); or short $(function(){…});This Function is called when the DOM is ready which means, you can start to query elements for instance. .ready() will use different ways on different browsers to make sure that the DOM really IS ready. $(document).ready() will be executed once the document is loaded. $(function(){…}); is a shortcut for $(document).ready() and does the exact same thing. (function(){ … })();That is nothing else than a function that invokes itself as soon as possible when the browser is interpreting your ecma-/javascript. Therefor, its very unlikely that you can successfully act on DOM elements here. (function(){…})(); will be executed as soon as it is encountered in the Javascript. The following code will be executed when the DOM (Document object model) is ready for JavaScript code to execute. 123$(document).ready(function()&#123; // Write code here&#125;); The short hand for the above code is:123$(function()&#123; // write code here&#125;); The code shown below is a self-invoking anonymous JavaScript function, and will be executed as soon as browser interprets it:123(function()&#123; //write code here&#125;)(); // It is the parenthesis here that call the function. The jQuery self-invoking function shown below, passes the global jQuery object as an argument to function($). This enables $ to be used locally within the self-invoking function without needing to traverse the global scope for a definition. jQuery is not the only library that makes use of $, so this reduces potential naming conflicts.123(function($)&#123; //some code&#125;)(jQuery);","categories":[],"tags":[{"name":"jQuery","slug":"jQuery","permalink":"http://rainygoblin.github.io/tags/jQuery/"},{"name":"ready","slug":"ready","permalink":"http://rainygoblin.github.io/tags/ready/"},{"name":"self calling","slug":"self-calling","permalink":"http://rainygoblin.github.io/tags/self-calling/"}]},{"title":"Hide Ionic 2 Tab bar On Specific Tabs","slug":"2016/12/Hide Ionic 2 Tab bar On Specific Tabs","date":"2016-12-22T21:57:16.000Z","updated":"2017-03-09T02:57:18.912Z","comments":true,"path":"2016/12/22/2016/12/Hide Ionic 2 Tab bar On Specific Tabs/","link":"","permalink":"http://rainygoblin.github.io/2016/12/22/2016/12/Hide Ionic 2 Tab bar On Specific Tabs/","excerpt":"","text":"Hide Ionic 2 Tab bar On Specific Tabs So by default the tab bar is displayed at the top or the bottom and when any one of the tab is clicked the view is navigated to it, but the tab bar is still displayed. There can be a use case where you would want to hide the tab bar when a specific tab is clicked. hide-ionic-2-tab-bar Before going further let me tell you that instead of hiding the tab bar you should focus on making changes to your navigation flow so that you are showing a modal or another page instead of hiding the tab bar. Having said that, hiding the tab bar is easy so let’s jump right into it. Step 1)We will start off by creating a new project. Make sure that you are creating the app using the tabs template. To do that we will run the following command 12ionic start hideTabs tabs --v2cd hideTabs That’s the only command we will need to execute in the tutorial. Step 2)The default app has three tabs in the tab bar by default, namely home, about and contact. Let’s say that we want to hide the tab bar when the user navigates to the about tab. For that, we will need to make changes to the about.ts file which you can find at1src\\pages\\about\\about.ts Open the file and put the following code in it. 1234567891011121314151617181920212223src \\pages\\about\\about.tsimport &#123; Component &#125; from \\'@angular/core\\';import &#123; NavController &#125; from \\'ionic-angular\\';@Component(&#123; selector: \\'page-about\\', templateUrl: \\'about.html\\'&#125;)export class AboutPage &#123; tabBarElement: any; constructor(public navCtrl: NavController) &#123; this.tabBarElement = document.querySelector(\\'.tabbar.show-tabbar\\'); &#125; ionViewWillEnter() &#123; this.tabBarElement.style.display = \\'none\\'; &#125; ionViewWillLeave() &#123; this.tabBarElement.style.display = \\'flex\\'; &#125;&#125; Let’s understand what we are doing here. First of all, we are getting the tab bar element and storing it a variable called tabBarElement. Then we are hooking into the NavVontrollers lifecycle hooks. You can read more on lifecycle events here. The ionViewWillEnter() method will be called when the view is about to be shown so we are hiding the tab bar by doing this.tabBarElement.style.display = ‘none’;. Similarly, we want to unhide the tab bar element when the view is about to leave, we so that using ionViewWillLeave() and we set the display property to flex by doing this.tabBarElement.style.display = ‘flex’; By doing just this we are hiding the tab bar effectively,you can stop right here the next step is optional. Step 3)We have successfully hidden the tab bar but there is one problem we no longer have any way to go back from the about tab because we have hidden the tab bar. The hardware back button will work but what if you want to have a back button in the navbar. We can add a back button manually that will show up next to the page title of the about page. We add the button in the about.html file as follows 12345678910111213141516src\\pages\\about\\about.html&lt;ion-header&gt; &lt;ion-navbar&gt; &lt;button ion-button icon-only menuToggle (click)=\"takeMeBack()\"&gt; &lt;ion-icon name=\"arrow-back\"&gt;&lt;/ion-icon&gt; &lt;/button&gt; &lt;ion-title&gt; About &lt;/ion-title&gt; &lt;/ion-navbar&gt;&lt;/ion-header&gt;&lt;ion-content padding&gt; This is About Page Tab bar is Hidden.&lt;/ion-content&gt; As shown we are adding the button with arrow-back icon. Notice that the button has menuToggle attribute applied to it. This will prevent the button to have any color. Also we are hooking up the takeMeBack() function to the click event of the button. Step 4)We have created the button, now it’s time to add the click functionality to it. We do that by adding the following to the about.ts file. 1234567891011121314151617181920212223242526import &#123; Component &#125; from '@angular/core';import &#123; NavController &#125; from 'ionic-angular';@Component(&#123; selector: 'page-about', templateUrl: 'about.html'&#125;)export class AboutPage &#123; tabBarElement: any; constructor(public navCtrl: NavController) &#123; this.tabBarElement = document.querySelector('.tabbar.show-tabbar'); &#125; ionViewWillEnter() &#123; this.tabBarElement.style.display = 'none'; &#125; ionViewWillLeave() &#123; this.tabBarElement.style.display = 'flex'; &#125; takeMeBack() &#123; this.navCtrl.parent.select(0); &#125;&#125; As tabs have a zero-based index, we are navigating to the first tab by passing 0 in this.navCtrl.parent.select(0);. And just like that, we have hidden the tab bar on a specific tab. ConclusionAs you saw hidden tab bar for specific tabs is really simple. But as I mentioned you would be better off creating a separate page or a modal rather than hiding the tabs. Also, make sure that you are handling the history of the tabs properly because each tab under the tab bar has it’s own navigation stack that needs to be dealt with. But know how to hide tab bar is one of those tricks that is handy to have around","categories":[],"tags":[{"name":"Ionic 2","slug":"Ionic-2","permalink":"http://rainygoblin.github.io/tags/Ionic-2/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://rainygoblin.github.io/tags/JavaScript/"}]},{"title":"Ionic 2 & JavaScript","slug":"2016/12/Ionic 2 & Javascript","date":"2016-12-21T21:09:16.000Z","updated":"2017-03-09T02:57:18.912Z","comments":true,"path":"2016/12/21/2016/12/Ionic 2 & Javascript/","link":"","permalink":"http://rainygoblin.github.io/2016/12/21/2016/12/Ionic 2 & Javascript/","excerpt":"","text":"如何在Ionic2项目中使用第三方JavaScript库 Ionic的官网放出一记大招Ionic and Typings，来介绍如何在Ionic2项目中使用第三方JavaScript库。 因为在前阵子正好想用一个非常有名的第三方JS库ChartJs来实现一些东西，但我们的项目框架使用的是Ionic2,并且使用的是TypeScript来做开发语言的，所以当时想了很多的办法也没有很好地集成进来，最后还是使用了一个开源库ng2-charts来实现的。 看了Ionic and Typings的教程，来总结一下方法吧，其实特别简单啦，如下 123npm install -g typingstypings search loadstypings install lodash --save 以上是教程中使用lodash的方法，现在我们来看一下，如果我想在自己的Ionic2项目中使用ChartJs的步骤吧。 1, 安装ChartJs库12cd /项目的根目录下npm install chart.js --save 2, 全局安装typings1npm install -g typings 3, 咱们也搜一下有多少个chart.js的源啦1typings search chart.js 12345Viewing 2 of 2NAME SOURCE HOMEPAGE DESCRIPTION VERSIONS UPDATEDchart.js npm https://www.npmjs.com/package/chart.js 1 2016-06-15T17:49:20.000Zchart dt https://github.com/nnnick/Chart.js 1 2016-03-16T15:55:26.000Z 4, 不错，有两个源，安装chart.js，这个看起来比较新1typings install chart.js --save 基本的环境配置到这里搞定了 接下来看一下如何在项目中使用1, 参考ChartJS的官网，在xxx.html创建一个Chart. 123&lt;ion-content padding class=\"about\"&gt; &lt;canvas id=\"myChart\" width=\"400\" height=\"400\"&gt;&lt;/canvas&gt;&lt;/ion-content&gt; 2, 在xxx.ts中引用Chart，并创建数据。如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051import &#123;Component&#125; from '@angular/core';import &#123;NavController&#125; from 'ionic-angular';import * as ChartJs from 'chart.js'; // 导入chart.js@Component(&#123; templateUrl: 'build/pages/about/about.html'&#125;)export class AboutPage &#123; constructor(private navController:NavController) &#123; &#125; ionViewDidEnter() &#123; var canvas = &lt;HTMLCanvasElement&gt; document.getElementById(\"myChart\"); var ctx = canvas.getContext(\"2d\"); // 这里是关键, 不能写在constructor()中 ChartJs.Line(ctx,&#123; data: &#123; labels: [\"Red\", \"Blue\", \"Yellow\", \"Green\", \"Purple\", \"Orange\"], datasets: [&#123; label: '# of Votes', data: [12, 19, 3, 5, 2, 3], backgroundColor: [ 'rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 206, 86, 0.2)', 'rgba(75, 192, 192, 0.2)', 'rgba(153, 102, 255, 0.2)', 'rgba(255, 159, 64, 0.2)' ], borderColor: [ 'rgba(255,99,132,1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)', 'rgba(255, 159, 64, 1)' ], borderWidth: 1 &#125;] &#125;, options: &#123; scales: &#123; yAxes: [&#123; ticks: &#123; beginAtZero:true &#125; &#125;] &#125; &#125; &#125;) &#125;&#125; OK! 大功告成~ 运行一下项目看一下喽~ 参考Ionic and TypingsTypeScript: problems with type system 文／思小言（简书作者）原文链接：http://www.jianshu.com/p/5f603f593917著作权归作者所有，转载请联系作者获得授权，并标注“简书作者”。","categories":[],"tags":[{"name":"Ionic 2","slug":"Ionic-2","permalink":"http://rainygoblin.github.io/tags/Ionic-2/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://rainygoblin.github.io/tags/JavaScript/"}]},{"title":"Hello Atom","slug":"2016/12/Hello-Atom","date":"2016-12-21T18:51:31.000Z","updated":"2017-03-09T02:57:18.912Z","comments":true,"path":"2016/12/21/2016/12/Hello-Atom/","link":"","permalink":"http://rainygoblin.github.io/2016/12/21/2016/12/Hello-Atom/","excerpt":"","text":"A hackable text editorAtom is a text editor that’s modern, approachable, yet hackable to the core—a tool you can customize to do anything but also use productively without ever touching a config file. Atom For Markdown使用Atom预览markdown 1、打开任意.md文件(markdown源文件)菜单栏File-&gt;Open file…(ctrl+o)打开文件； 2、windows下使用快捷键 ctrl + shift + p，打开命令输入框；Mac下使用 Command + Shift + P, 3、输入 markdown preview toggle(可以偷懒只输入mdpt，支持模糊匹配)也可以通过菜单栏Packages-&gt;Markdown Preview-&gt;Toggle Treview; 按enter键即可看到预览，左边编辑，右边实时预览:也可以直接使用快捷键不过由于快捷键冲突问题可能没效果，当你熟悉Atom之后你也可以定制属于直接的一套快捷键；","categories":[],"tags":[{"name":"Atom","slug":"Atom","permalink":"http://rainygoblin.github.io/tags/Atom/"},{"name":"Markdown","slug":"Markdown","permalink":"http://rainygoblin.github.io/tags/Markdown/"}]},{"title":"Hello Idea","slug":"2016/12/Hello-Idea","date":"2016-12-21T10:10:31.000Z","updated":"2017-03-09T02:57:18.912Z","comments":true,"path":"2016/12/21/2016/12/Hello-Idea/","link":"","permalink":"http://rainygoblin.github.io/2016/12/21/2016/12/Hello-Idea/","excerpt":"","text":"http://www.cnblogs.com/wxd0108/p/5295017.html Mac键盘符号和修饰键说明 ⌘ Command ⇧ Shift ⌥ Option ⌃ Control ↩︎ Return/Enter ⌫ Delete ⌦ 向前删除键（Fn+Delete） ↑ 上箭头 ↓ 下箭头 ← 左箭头 → 右箭头 ⇞ Page Up（Fn+↑） ⇟ Page Down（Fn+↓） Home Fn + ← End Fn + → ⇥ 右制表符（Tab键） ⇤ 左制表符（Shift+Tab） ⎋ Escape (Esc) 一、Editing（编辑） ⌃Space 基本的代码补全（补全任何类、方法、变量） ⌃⇧Space 智能代码补全（过滤器方法列表和变量的预期类型） ⌘⇧↩ 自动结束代码，行末自动添加分号 ⌘P 显示方法的参数信息 ⌃J, Mid. button click 快速查看文档 ⇧F1 查看外部文档（在某些代码上会触发打开浏览器显示相关文档） ⌘+鼠标放在代码上 显示代码简要信息 ⌘F1 在错误或警告处显示具体描述信息 ⌘N, ⌃↩, ⌃N 生成代码（getter、setter、构造函数、hashCode/equals,toString） ⌃O 覆盖方法（重写父类方法） ⌃I 实现方法（实现接口中的方法） ⌘⌥T 包围代码（使用if..else, try..catch, for, * synchronized等包围选中的代码） ⌘/ 注释/取消注释与行注释 ⌘⌥/ 注释/取消注释与块注释 ⌥↑ 连续选中代码块 ⌥↓ 减少当前选中的代码块 ⌃⇧Q 显示上下文信息 ⌥↩ 显示意向动作和快速修复代码 ⌘⌥L 格式化代码 ⌃⌥O 优化import ⌃⌥I 自动缩进线 ⇥ / ⇧⇥ 缩进代码 / 反缩进代码 ⌘X 剪切当前行或选定的块到剪贴板 ⌘C 复制当前行或选定的块到剪贴板 ⌘V 从剪贴板粘贴 ⌘⇧V 从最近的缓冲区粘贴 ⌘D 复制当前行或选定的块 ⌘⌫ 删除当前行或选定的块的行 ⌃⇧J 智能的将代码拼接成一行 ⌘↩ 智能的拆分拼接的行 ⇧↩ 开始新的一行 ⌘⇧U 大小写切换 ⌘⇧] / ⌘⇧[ 选择直到代码块结束/开始 ⌥⌦ 删除到单词的末尾（⌦键为Fn+Delete） ⌥⌫ 删除到单词的开头 ⌘+ / ⌘- 展开 / 折叠代码块 ⌘⇧+ 展开所以代码块 ⌘⇧- 折叠所有代码块 ⌘W 关闭活动的编辑器选项卡 二、Search/Replace（查询/替换） Double ⇧ 查询任何东西 ⌘F 文件内查找 ⌘G 查找模式下，向下查找 ⌘⇧G 查找模式下，向上查找 ⌘R 文件内替换 ⌘⇧F 全局查找（根据路径） ⌘⇧R 全局替换（根据路径） ⌘⇧S 查询结构（Ultimate Edition 版专用，需要在Keymap中设置） ⌘⇧M 替换结构（Ultimate Edition 版专用，需要在Keymap中设置） 三、Usage Search（使用查询） ⌥F7 / ⌘F7 在文件中查找用法 / 在类中查找用法 ⌘⇧F7 在文件中突出显示的用法 ⌘⌥F7 显示用法 四、Compile and Run（编译和运行） ⌘F9 编译Project ⌘⇧F9 编译选择的文件、包或模块 ⌃⌥R 弹出 Run 的可选择菜单 ⌃⌥D 弹出 Debug 的可选择菜单 ⌃R 运行 ⌃D 调试 ⌃⇧R, ⌃⇧D 从编辑器运行上下文环境配置 五、Debugging（调试） F8 进入下一步，如果当前行断点是一个方法，则不进入当前方法体内 F7 进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中 ⇧F7 智能步入，断点所在行上有多个方法调用，会弹出进入哪个方法 ⇧F8 跳出 ⌥F9 运行到光标处，如果光标前有其他断点会进入到该断点 ⌥F8 计算表达式（可以更改变量值使其生效） ⌘⌥R 恢复程序运行，如果该断点下面代码还有断点则停在下一个断点上 ⌘F8 切换断点（若光标当前行有断点则取消断点，没有则加上断点） ⌘⇧F8 查看断点信息 六、Navigation（导航） ⌘O 查找类文件 ⌘⇧O 查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠/ ⌘⌥O 前往指定的变量 / 方法 ⌃← / ⌃→ 左右切换打开的编辑tab页 F12 返回到前一个工具窗口 ⎋ 从工具窗口进入代码文件窗口 ⇧⎋ 隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口 ⌘⇧F4 关闭活动run/messages/find/… tab ⌘L 在当前文件跳转到某一行的指定处 ⌘E 显示最近打开的文件记录列表 ⌘⌥← / ⌘⌥→ 退回 / 前进到上一个操作的地方 ⌘⇧⌫ 跳转到最后一个编辑的地方 ⌥F1 显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择(如在代码编辑窗口可以选择显示该文件的Finder) ⌘B / ⌘ 鼠标点击 进入光标所在的方法/变量的接口或是定义处 ⌘⌥B 跳转到实现处，在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口 ⌥ Space, ⌘Y 快速打开光标所在方法、类的定义 ⌃⇧B 跳转到类型声明处 ⌘U 前往当前光标所在方法的父类的方法 / 接口定义 ⌃↓ / ⌃↑ 当前光标跳转到当前文件的前一个/后一个方法名位置 ⌘] / ⌘[ 移动光标到当前所在代码的花括号开始/结束位置 ⌘F12 弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法） ⌃H 显示当前类的层次结构 ⌘⇧H 显示方法层次结构 ⌃⌥H 显示调用层次结构 F2 / ⇧F2 跳转到下一个/上一个突出错误或警告的位置 F4 / ⌘↓ 编辑/查看代码源 ⌥ Home 显示到当前文件的导航条 F3选中文件/文件夹/代码行，添加/取消书签 ⌥F3 选中文件/文件夹/代码行，使用助记符添加/取消书签 ⌃0…⌃9 定位到对应数值的书签位置 ⌘F3 显示所有书签 七、Refactoring（重构） F5 复制文件到指定目录 F6 移动文件到指定目录 ⌘⌫ 在文件上为安全删除文件，弹出确认框 ⇧F6 重命名文件 ⌘F6 更改签名 ⌘⌥N 一致性 ⌘⌥M 将选中的代码提取为方法 ⌘⌥V 提取变量 ⌘⌥F 提取字段 ⌘⌥C 提取常量 ⌘⌥P 提取参数 八、VCS/Local History（版本控制/本地历史记录） ⌘K 提交代码到版本控制器 ⌘T 从版本控制器更新代码 ⌥⇧C 查看最近的变更记录 ⌃C 快速弹出版本控制器操作面板 ##九、Live Templates（动态代码模板） ⌘⌥J 弹出模板选择窗口，将选定的代码使用动态模板包住 ⌘J 插入自定义动态代码模板 十、General（通用） ⌘1…⌘9 打开相应编号的工具窗口 ⌘S 保存所有 ⌘⌥Y 同步、刷新 ⌃⌘F 切换全屏模式 ⌘⇧F12 切换最大化编辑器 ⌥⇧F 添加到收藏夹 ⌥⇧I 检查当前文件与当前的配置文件 §⌃, ⌃` 快速切换当前的scheme（切换主题、代码样式等） ⌘, 打开IDEA系统设置 ⌘; 打开项目结构对话框 ⇧⌘A 查找动作（可设置相关选项） ⌃⇥ 编辑窗口标签和工具窗口之间切换（如果在切换的过程加按上delete，则是关闭对应选中的窗口） 十一、Other（一些官方文档上没有体现的快捷键） ⌘⇧8 竖编辑模式 导航 ⌘O 查找类文件 Ctrl + N ⌘⌥O 前往指定的变量 / 方法 Ctrl + Shift + Alt + N ⌃← / ⌃→ 左右切换打开的编辑tab页 Alt← / Alt→ ⎋ 从工具窗口进入代码文件窗口 ESC ⌘L 在当前文件跳转到某一行的指定处 Ctrl + G ⌘E 显示最近打开的文件记录列表 Ctrl + E ⌘⌥← / ⌘⌥→ 退回 / 前进到上一个操作的地方 Ctrl + Alt + ← Ctrl + Alt + → ⌘⇧⌫ 跳转到最后一个编辑的地方 ⌃H 显示当前类的层次结构 Ctrl + H ⌘⇧H 显示方法层次结构 ⌃⌥H 显示调用层次结构 F4 / ⌘↓ 编辑/查看代码源 ⌘⌥U 显示类UML图 ⌃J 查看注释 编辑 ⌥⌦ 删除到单词的末尾（⌦键为Fn+Delete） ⌥⌫ 删除到单词的开头 ⌘+ / ⌘- 展开 / 折叠代码块 ⌘F1 在错误或警告处显示具体描述信息 ⌘⌥L 格式化代码 ⌃⌥O 优化import ⇧↩ 开始新的一行 ⌘⇧↩ 自动结束代码，行末自动添加分号 ⌃I 实现方法（实现接口中的方法） ⇧F6 重命名文件或者变量 ⌘N, ⌃↩, ⌃N 生成代码（getter、setter、构造函数、hashCode/equals,toString） ⌘P 显示方法的参数信息 查找 Double⇧ 查找任何东西 ⌘⇧F 全局查找（根据路径） ⌘F 文件内查找 ⌘G 查找模式下，向下查找 ⌘⇧G 查找模式下，向上查找 导航 ⌘⌥B 跳转到接口的实现 ⌘U 查看接口定义 ⌘⌥← / ⌘⌥→ 退回 / 前进到上一个操作的地方 ⌘B / ⌘ 鼠标点击 进入光标所在的方法/变量的接口或是定义处 ⌃⇧B 跳转到类型声明处 ⌥ Space, ⌘Y 快速打开光标所在方法、类的定义 ⌘O 查找类文件 ⌘⇧O 查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠/ F12 返回到前一个工具窗口 ⎋ 从工具窗口进入代码文件窗口 ⇧⎋ 隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口 F3选中文件/文件夹/代码行，添加/取消书签 ⌥F3 选中文件/文件夹/代码行，使用助记符添加/取消书签 ⌃0…⌃9 定位到对应数值的书签位置 ⌘F3 显示所有书签 ⌥F1 显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择(如在代码编辑窗口可以选择显示该文件的Finder) ⌘F12 弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法） 通用 ⌃⌘F 切换全屏模式","categories":[],"tags":[{"name":"Idea","slug":"Idea","permalink":"http://rainygoblin.github.io/tags/Idea/"},{"name":"快捷键","slug":"快捷键","permalink":"http://rainygoblin.github.io/tags/快捷键/"}]},{"title":"Android Chrome DevTools","slug":"2016/12/Android-Chrome-DevTools","date":"2016-12-20T09:49:16.000Z","updated":"2017-03-09T02:57:18.912Z","comments":true,"path":"2016/12/20/2016/12/Android-Chrome-DevTools/","link":"","permalink":"http://rainygoblin.github.io/2016/12/20/2016/12/Android-Chrome-DevTools/","excerpt":"","text":"","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"http://rainygoblin.github.io/tags/Android/"},{"name":"Chrome DevTools","slug":"Chrome-DevTools","permalink":"http://rainygoblin.github.io/tags/Chrome-DevTools/"}]},{"title":"Hello-ZSH","slug":"2016/12/Hello-ZSH","date":"2016-12-17T20:46:19.000Z","updated":"2017-03-09T02:57:18.912Z","comments":true,"path":"2016/12/17/2016/12/Hello-ZSH/","link":"","permalink":"http://rainygoblin.github.io/2016/12/17/2016/12/Hello-ZSH/","excerpt":"","text":"Mac using ZSH将bash切换为zsh1chsh -s /bin/zsh 如果要切换回去：1chsh -s /bin/bash 下载oh-my-zsh1) 直接用git从github上面下载包：1git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh 2) 备份已有的zshrc(一般不需要)1cp ~/.zshrc ~/.zshrc.orig 3) 替换zshrc1cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc （也可以把你的bash的配置文件(~/.bash_prorile或者~/.profile等)给拷贝到zsh的配置文件~/.zshrc里，因为zsh兼容bash）","categories":[],"tags":[]},{"title":"Hexo 通过 Travis 自动部署到 Github","slug":"iusses/Issues-Hexo-Github-Travis","date":"2016-12-15T22:29:21.000Z","updated":"2017-03-09T02:57:18.912Z","comments":true,"path":"2016/12/15/iusses/Issues-Hexo-Github-Travis/","link":"","permalink":"http://rainygoblin.github.io/2016/12/15/iusses/Issues-Hexo-Github-Travis/","excerpt":"","text":"配置 Travis 用于自动生成Travis 的 构建周期 分为两步： install 用于安装构建所需要的一些依赖script 运行构建脚本我们可以自定义这两个步骤，如在运行之前做一些配置，如果成功做一些动作，失败做一些动作等。具体支持的步骤如下： before_installinstallbefore_scriptscriptafter_success or after_failurebefore_deploy ，可选deploy ，可选after_deploy ，可选after_script 使用 Travis 自动部署 首先，我们需要对 _config.yml 进行配置，以执行 hexo deploy 进行部署： _config.yml Docs: http://hexo.io/docs/deployment.htmldeploy: type: git repo: https://github.com/rainygoblin/rainygoblin.github.io.git branch: master然后我们可以在 .travis.yml 添加生成成功后的动作： .travis.ymlafter_success: git config –global user.name “Your Name” git config –global user.email “Your Email” hexo deploy 1. Github OAuthGithub OAuth 支持一种特殊的 URL 来执行 push/pull 等等操作，而不需要输入用户名密码。但这需要事先在 Github 上创建一个 token： 打开 Personal Access Tokens点击 Create new tokentoken 的权限保持默认即可有了这个 token 后，原先用 https://github.com/username/repo.git进行访问，现在换成： https://@github.com/owner/repo.git即可。切记，这个 token 的权限很大，不要把原文提交到 Github 上。 2. Travis 加密 token上面我们说了，要保护好你的 github token。所以我们在写入 travis 配置时要先对这个 token 进行加密。 首先安装 travis 命令行工具： gem install travistravis login之后通过如下命令在 .travis.yml 添加额外的配置： travis encrypt ‘GH_TOKEN=‘ –add上面命令会在 .travis.yml 添加如下内容： .travis.ymlenv: global: secure: QAH+/EIDC/Jg…上面的一长串字符串就是加密后的环境变量。之后，在 Travis 执行脚本时，我们就可能访问环境变量 GITHUB_API_KEY 来获取 github token 了。 最后，我们用 sed 命令动态地修改 github 的 URL，加入 token 信息： .travis.ymlafter_success: git config –global user.name “Mark Wallace” git config –global user.email “lotabout@gmail.com” sed -i’’ “/^ *repo/s~github.com~${GITHUB_API_KEY}@github.com~” _config.yml hexo deploy","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://rainygoblin.github.io/tags/Hexo/"},{"name":"Travis","slug":"Travis","permalink":"http://rainygoblin.github.io/tags/Travis/"},{"name":"Github","slug":"Github","permalink":"http://rainygoblin.github.io/tags/Github/"}]},{"title":"Issues of Cordova&Ionic","slug":"iusses/Issues-Cordova-Ionic","date":"2016-12-15T20:29:20.000Z","updated":"2016-12-15T20:29:20.000Z","comments":true,"path":"2016/12/15/iusses/Issues-Cordova-Ionic/","link":"","permalink":"http://rainygoblin.github.io/2016/12/15/iusses/Issues-Cordova-Ionic/","excerpt":"","text":"1、No Content-Security-Policy meta tag found. Please add one when using the cordova-plugin-whitelist plugin.解决办法index.html 中添加《meta http-equiv=”Content-Security-Policy” content=”default-src *; style-src ‘self’ ‘unsafe-inline’; script-src ‘self’ ‘unsafe-inline’ ‘unsafe-eval’”》 2、ionic 隐藏 nav-bar文档上来看，需要在controller中调用 $ionicNavBarDelegate例如 .controller(‘DashCtrl’, function ($scope, $ionicNavBarDelegate) { $ionicNavBarDelegate.showBar(false);})但没起作用。最后在模板中使用标签方法hide-nav-bar = “true”该方法起作用。 3、 ng-model 与 input 值的问题例如 input type=”text” ng-model=”querystr”ng-model绑定到$scope.querystr 时，model会根据 text输入自动变化，但在controller中将$scope.querystr=’’时 ，text input的值不会产生变化。并且在使用ng-model时，无法使用angular.element(document).find(selector).val(“some value”);方式进行赋值。解决方法是在controller 中，设置一个结构，如$scope.queryMode ={querystr:’’};在input 中绑定 ng-model = “queryModel.querystr”则controller中重设 $scope.queryMode.querystr = ‘’;绑定生效，input 清空。 4、cordova插件 ,在ripple中弹出错误窗口如果安装cordova插件，如keyboard,statusbar 等， 会在ripple中抛各种错，并且每次加载会弹出窗口，让你写JSON回调， 这个是ripple的BUG，不支持自定义插件， 去掉弹窗的办法是在app.js上方，即定义angular.module（）的上方写 var annoyingDialog = parent.document.getElementByIdx_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x(‘exec-dialog’);上句中的x_x 去掉，新浪自动添加的。if (annoyingDialog) annoyingDialog.outerHTML = “”;弹窗将不再出现，但输出窗口中的ripple.js中的错误仍会，你可以过滤，也可以不管。 5、使用极光推送，按照github上的说明文档，加入插件后总是无法编译，查看是由于 platform/android/AndroidManifest.xml 中meta-data android:name=JPUSH_APPKEY android:value=aaabbbbmn9QITAv0Oe重复，每次build总会生成两条键值经查在plug/android.json 中，有两条重复生成的语句，删掉一个，即可。 6、ionic关于IFAME的调用因为使用第三方接口，会造成跑到应用外的地址，ionic无法控制外部连接回到应用，因此一般使用iframe方式打开外部连接，并加一个headbar用来返回到应用，如在modal中打开外部地址如html中 《script id=”login.html” type=”text/ng-template”》 《ion-modal-view》 《ion-header-bar align-title=”center” class=”bar-positive”》 《div class=”buttons”》 《button class=”button button-clear button-icon icon ion-ios-arrow-back”》《/button》 《button ng-click=”closeModal()” class=”button button-clear button-icon icon “》取消《/button》 《/div》 《h1 class=”title”》LOGIN《/h1》 《/ion-header-bar》 《ion-content scroll=”true” class=”has-header no-padding”》 《iframe id=”ifmr2” data-tap-disabled=”true” ng-src=”“》《/iframe》 《/ion-content》 《/ion-modal-view》《/script》 controller中$scope.tt = new Date().getMilliseconds();$scope.chatStru = { paySrc: $sce.trustAsResourceUrl(‘http://xxx.om/testlogin.jsp?tt=&#39;+$scope.tt), token: “”, hasToken: false };$ionicModal.fromTemplateUrl(‘login.html’, { scope: $scope, animation: ‘slide-in-up’ }).then(function (modal) { $scope.modal = modal; }); $scope.openModal = function () { $scope.modal.show(); }; $scope.closeModal = function () { $scope.modal.hide(); }; 但这样的问题是在于，页面完成后，你必须通过手动点击返回，并且无法进行数据的传递，这个在html5中其实已经有了非常完美的解决方法就是postMessage()在远端的被iframe的页面中，加入JSwindow.onload=function(){ window.parent.postMessage(‘logined’,’*’); } 并在inoic的controller中加入 window.addEventListener(‘message’, function (e) { var data = e.data;//这里返回的是 logined,相当于传递参数回来。 $scope.modal.hide(); }, false); 你会发现，你即接收到了data，同时又关闭了该modal ，而不需要手动关闭。当然，你可以将 addEventListener() 放到 $scope.openModal然后在 $scope.closeModal 中 removeEventListener()如 $scope.openModal = function () { var tt = new Date().getMilliseconds(); $scope.chatStru.paySrc = $sce.trustAsResourceUrl(‘http://xxx.cn/oe/testlogin.jsp?tt=‘ + tt); $scope.modal.show(); window.addEventListener(‘message’, function (e) { var data = e.data; $scope.chatStru.hasToken = true; $scope.modal.hide(); }, false); }; // function to close the modal $scope.closeModal = function () { $scope.modal.hide(); if ($scope.chatStru.hasToken) { window.removeEventListener(&apos;message&apos;, function () { }, false); } }; 最终可以这样写 var handel = function (e) { var data = e.data; if (data.id &gt; 0) { // 传回来的为json{id:1,msg:’aaa’} if (!$scope.chatStru.hasToken) { $scope.chatStru.hasToken = true; } $scope.modal.hide(); } else { $scope.chatStru.hasToken = false; } }; $scope.openModal = function () { var tt = new Date().getMilliseconds(); $scope.chatStru.paySrc = $sce.trustAsResourceUrl(&apos;http://xxx.cn/oe/testlogin.jsp?tt=&apos; + tt); $scope.modal.show(); if (!$scope.chatStru.hasToken) { window.addEventListener(&apos;message&apos;, handel, false); } }; $scope.closeModal = function () { $scope.modal.hide(); if ($scope.chatStru.hasToken) { window.removeEventListener(&apos;message&apos;, handel, false); } }; 7、使用android studio 运行cordova项目直接使用platfrom目录里的gradle 可以在android studio中直接导入 cordova的项目，但运行模拟器时出现Cannot reload AVD list: cvc-enumeration-valid: Value ‘280dpi’ is not facet-valid with respect to enumeration ‘[ldpi, mdpi, tvdpi, hdpi, xhdpi, 400dpi, xxhdpi, 560dpi, xxxhdpi]’. It must be a value from the enumeration.Error parsing D:\\sdkforas\\android-sdk-windows\\system-images\\android-22\\android-wear\\armeabi-v7a\\devices.xmlcvc-enumeration-valid: Value ‘280dpi’ is not facet-valid with respect to enumeration ‘[ldpi, mdpi, tvdpi, hdpi, xhdpi, 400dpi, xxhdpi, 560dpi, xxxhdpi]’. It must be a value from the enumeration.Error parsing D:\\sdkforas\\android-sdk-windows\\system-images\\android-22\\android-wear\\x86\\devices.xml解决方法 ：用/sdk/tools/lib/devices.xml去替换 system-images\\android-22\\android-wear\\x86\\devices.xml和system-images \\android-22\\android-wear\\armeabi-v7a\\devices.xml中的devices.xml 8、 android studio 中 gradle 失败gradle project sync failed.Basic functionality(e.g.editing,debugging) will not work properly.解决方法：android studio中，点击 tools -&gt;Android-&gt;sync project with gradles files. 9、加载远程js或css 出现 Refused to load the script 或 Refused to load the stylesheetbecause it violates the following ….例如 index.html中 加载字体《link href=’http://fonts.useso.com/css?family=RobotoDraft:400,500,700,400italic‘ rel=’stylesheet’》可在index.html添加安全许可《meta http-equiv=”Content-Security-Policy” content=”default-src *; style-src ‘self’ ‘unsafe-inline’ http://fonts.useso.com ; script-src ‘self’ ‘unsafe-inline’ ‘unsafe-eval’;”》直接加根域名即可，另外不要带引号 js 需要添加在 script-src 中。 10 、 ionic 中 弹出键盘遮挡住输入框在config.xml 中修改全屏为FALSE并添加 adjustPan (adjstResize没有成功) 《preference name=”Fullscreen” value=”False” /》 《preference name=”android-windowSoftInputMode” value=”adjustPan”/》 11、ionic监听滚动网上的示例xxx.bind(‘scroll’,function(){…..}),很容易将页面跑死， 换个思路，使用监听touchvar targetPos = window.screen.availHeight; $(“#scdiv”).on(“touchend”, function () {if (currpos &gt; 10 &amp;&amp; currpos &lt; targetPos / 4) { $ionicScrollDelegate.$getByHandle(‘homescroll’).scrollTo(0, 0, true); return false; } else if (currpos &gt;= targetPos / 4 &amp;&amp; currpos &lt;= targetPos - 10) { $ionicScrollDelegate.$getByHandle(‘homescroll’).scrollTo(0, targetPos - 64, true); return false; }})当触摸结束时，判断当前的位移，来做一些操作。这样在性能上提高了许多。$ionicScrollDelegate.$getByHandle 操作的是在html中定义的delegate-handle如《ion-content id=”scdiv” delegate-handle=”homescroll”》 12、 APP开启检测网络并提示开启需要三个插件1、https://github.com/apache/cordova-plugin-network-information2、https://github.com/apache/cordova-plugin-dialogs3、https://github.com/deefactorial/Cordova-open-native-settings 然后在APP.JS中，divicesReady中$ionicPlatform.ready(function () {if (navigator.connection) { var tmptypes = navigator.connection.type; if (tmptypes.toUpperCase().indexOf(‘NONE’) &gt; -1 || tmptypes.toUpperCase().indexOf(‘UNKNOWN’) &gt; -1) { if (navigator.notification) { navigator.notification.confirm( ‘您的设备未开启网络’, function (buttonIndex) { if (buttonIndex == 1) { if (cordova.plugins.settings) { cordova.plugins.settings.openSetting(“wifi”, function () { console.log(“network setting openning”); }, function () { console.log(“open network setting failed”); }); } } }, // callback to invoke with index of button pressed ‘提示’, // title [‘开启’, ‘取消’] // buttonLabels ); } } }}） 其中openSettings中可设置以下本地设置var settingNames = array( “open”, “accessibility”, “add_account”, “airplane_mode”, “apn”, “application_details”, “application_development”, “application”, “bluetooth”, “captioning”, “cast”, “data_roaming”, “date”, “device_info”, “display”, “dream”, “home”, “input_method”, “input_method_subtype”, “internal_storage”, “locale”, “location_source”, “manage_all_applications”, “manage_applications”, “memory_card”, “network_operator”, “nfcsharing”, “nfc_payment”, “nfc_settings”, “print”, “privacy”, “quick_launch”, “search”, “security”, “settings”, “show_regulatory_info”, “sound”, “sync”, “usage_access”, “user_dictionary”, “voice_input”, “wifi_ip”, “wifi”, “wireless”);其中相关网络的为wifi 移动数据开启未找到。谁试出了是哪个请告诉我 13、$sate.go 和 $stateParams 传参及收参在 controller1 中使用 $state.go(‘statename’,{id:1}) ;传递参数在 statename 相对应的 controller2 中接收参数$scope.id = $stateParams.id;注意，此处必须在router.js 中设置 statename 的参数形式如.state(‘statename ‘, { url: ‘/statename ‘, params: { ‘id’: null }, templateUrl: ‘templates/Users/statename .html’, controller: ‘controller2 ‘})其中params: { ‘id’: null }, 对应$state传的参，若不设，则必为undefined 14、关于ionic中想底部加一长按钮，随页面滚动位置不变，例如最初的方案是在 ion-content 外 ion-view 内添加一层div …..style= ….. position:fixed bottom:0px;之类，但最终发现，在不同分辨率下位置并不正确基本可确定是因为statusbar等的缘故，仔细看了下ionic.css最终发现，太简单了div class=”tabs” 就可以了。 15、php中取值问题ionic中用的$http method:post ，params……..在PHP中用$_POST取不到值， 改成 $_Request 就行了。 16、使用vs2015 release会提示使用发布配置进行调试时，Android 程序包必须已签名。要配置 Android 签名，请按照 http://go.microsoft.com/fwlink/?LinkID=613579 中的说明操作（该网页很难打开）实际需要在项目根目录的build.json中添加生成的keystore{ “android”: { “release”: { “keystore”: “E:\\Projects\\android.keystore”, “storePassword”: “*“, “alias”: “**“, “password”: “*“, “keystoreType”: “” } } }至于生成keystore 请百度，只要有jdk 运行命令就OK 17、ionic 的滚动优化在app.js中的config 块中，加入$ionicConfigProvider.scrolling.jsScrolling(false);默认所有的滚动使用native，会比js的滚动快很多，并且很平滑，但这样做的话，无法使用一些效果，如has-bouncing=”true”（仿苹果的一种上下拉显示背景的弹性效果）那你可以在特定的view中，ion-content中加入overflow-scroll=”false”，则该view保持js滚动 18、微信支付支付宝支付非常简单，文档也很丰富，微信的相对来说低了不止一个档次，当然最郁闷的一件事是经过了数天的查错，发现微信的totalfee 居然是以分为单位，换句话来说，你传价格时，只会有整数如果出现0.01，那必然出错。","categories":[],"tags":[{"name":"Cordova","slug":"Cordova","permalink":"http://rainygoblin.github.io/tags/Cordova/"},{"name":"Ionic","slug":"Ionic","permalink":"http://rainygoblin.github.io/tags/Ionic/"}]},{"title":"Hello Cordova","slug":"2016/12/Hello-Cordova","date":"2016-12-15T18:51:31.000Z","updated":"2017-03-09T02:57:18.912Z","comments":true,"path":"2016/12/15/2016/12/Hello-Cordova/","link":"","permalink":"http://rainygoblin.github.io/2016/12/15/2016/12/Hello-Cordova/","excerpt":"","text":"Mobile apps with HTML, CSS &amp; JSTarget multiple platforms with one code baseFree and open source1. Installing CordovaCordova command-line runs on Node.js and is available on NPM. Follow platform specific guides to install additional platform dependencies. Open a command prompt or Terminal, and type npm install -g cordova. 1$ npm install -g cordova npm install -g cordova 2. Create a projectCreate a blank Cordova project using the command-line tool. Navigate to the directory where you wish to create your project and type cordova create . For a complete set of options, type cordova help create. 1$ cordova create MyApp cordova create MyApp 3. Add a platformAfter creating a Cordova project, navigate to the project directory. From the project directory, you need to add a platform for which you want to build your app. To add a platform, type cordova platform add . For a complete list of platforms you can add, run cordova platform. 123$ cd MyApp$ cordova platform add browser cd MyApp cordova platform add browser 4. Run your appFrom the command line, run cordova run . 1$ cordova run browser","categories":[],"tags":[{"name":"Cordova","slug":"Cordova","permalink":"http://rainygoblin.github.io/tags/Cordova/"}]},{"title":"Hello Ionic","slug":"2016/12/Hello-Ionic","date":"2016-12-15T17:42:50.000Z","updated":"2017-03-09T02:57:18.912Z","comments":true,"path":"2016/12/15/2016/12/Hello-Ionic/","link":"","permalink":"http://rainygoblin.github.io/2016/12/15/2016/12/Hello-Ionic/","excerpt":"","text":"Installing IonicIonic 2 apps are created and developed primarily through the Ionic command line utility (the “CLI”), and use Cordova to build and deploy as a native app. This means we need to install a few utilities to get developing. Ionic CLI and CordovaTo create Ionic 2 projects, you’ll need to install the latest version of the CLI and Cordova. Before you do that, you’ll need a recent version of Node.js. Download the installer for Node.js 6 or greater and then proceed to install the Ionic CLI and Cordova for native app development: 1$ npm install -g ionic cordova You may need to add “sudo” in front of these commands to install the utilities globally Once that’s done, create your first Ionic app: 1$ ionic start cutePuppyPics --v2 Omit –v2 if you’d like to use Ionic 1. To run your app, cd into the directory that was created and then run the ionic serve command to test your app right in the browser! 12$ cd cutePuppyPics$ ionic serve","categories":[],"tags":[{"name":"Cordova","slug":"Cordova","permalink":"http://rainygoblin.github.io/tags/Cordova/"},{"name":"Ionic 2","slug":"Ionic-2","permalink":"http://rainygoblin.github.io/tags/Ionic-2/"},{"name":"AngularJS 2","slug":"AngularJS-2","permalink":"http://rainygoblin.github.io/tags/AngularJS-2/"}]},{"title":"Hello Hexo","slug":"2016/12/Hello-Hexo","date":"2016-12-15T17:42:40.000Z","updated":"2017-03-09T02:57:18.912Z","comments":true,"path":"2016/12/15/2016/12/Hello-Hexo/","link":"","permalink":"http://rainygoblin.github.io/2016/12/15/2016/12/Hello-Hexo/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartInstallationInstalling Hexo is quite easy. However, you do need to have a couple of other things installed first: Node.jsGit If your computer already has these, congratulations! Just install Hexo with npm: 12345$ npm install -g hexo-cli$ hexo init blog$ cd blog$ npm install$ hexo server Create a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://rainygoblin.github.io/tags/Hexo/"},{"name":"blog","slug":"blog","permalink":"http://rainygoblin.github.io/tags/blog/"}]}]}